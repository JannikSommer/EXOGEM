# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from {{modelPackage}}.base_model_ import Model
{{#models}}
{{#model}}
{{#pyImports}}
{{import}}
{{/pyImports}}
{{/model}}
{{/models}}
from {{packageName}} import util

{{#imports}}
{{{import}}}  # noqa: E501
{{/imports}}

{{#models}}
{{#model}}
class {{classname}}(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """
{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}
{{/allowableValues}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):  # noqa: E501
        """{{classname}} - a model defined in OpenAPI

        {{#vars}}
        :param {{name}}: The {{name}} of this {{classname}}.  # noqa: E501
        :type {{name}}: {{dataType}}
        {{/vars}}
        """
        self.openapi_types = {
{{#vars}}
            '{{name}}': {{{dataType}}},
{{/vars}} }

        self.attribute_map = {
{{#vars}}
            '{{name}}': '{{baseName}}',
{{/vars}} }

    {{#vendorExtensions}}{{#x-monitor-data}}
        # Will only add the timestamps to the dict if "include-time" is specified to false. Otherwise return other dict
        if {{#lambda.titlecase}}{{{include-time}}}{{/lambda.titlecase}}:
            openapi_types['request_time'] = datetime
            openapi_types['response_time'] = datetime
            attribute_map['request_time'] = 'request_time'
            attribute_map['response_time'] = 'response_time'

        # Will only add the client id to the dict if "include-client-id" is specified to false. Otherwise return other dict
        if {{#lambda.titlecase}}{{{include-client-id}}}{{/lambda.titlecase}}:
            openapi_types['client_id'] = str
            attribute_map['client_id'] = 'client_id'
    {{/x-monitor-data}}{{/vendorExtensions}}

{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = {{name}}
{{/vars}}
    {{#vendorExtensions}}{{#x-monitor-data}}
        # Will only include the properties if the specification has "include-time" set to true. Otherwise false.
        if {{#lambda.titlecase}}{{{include-time}}}{{/lambda.titlecase}}:
            self._request_time = datetime.now()
            self._response_time = datetime.now()
        if {{#lambda.titlecase}}{{{include-client-id}}}{{/lambda.titlecase}}:
            self._client_id = "unspecified"
    {{/x-monitor-data}}{{/vendorExtensions}}

    @classmethod
    def from_dict(cls, dikt){{^supportPython2}} -> '{{classname}}'{{/supportPython2}}:
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The {{name}} of this {{classname}}.  # noqa: E501
        :rtype: {{classname}}
        """
        return util.deserialize_model(dikt, cls){{#vars}}{{#-first}}

{{/-first}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{dataType}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type {{name}}: {{dataType}}
        """
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isArray}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isArray}}
{{#isMap}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMap}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if {{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#required}}
        if {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")  # noqa: E501
{{/required}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")  # noqa: E501
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{name}} = {{name}}{{^-last}}

{{/-last}}
{{/vars}}
{{#vendorExtensions}}{{#x-monitor-data}}
    @property
    def request_time(self):
        """Gets the request_time of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :return: The request_time of this {{classname}}.
        :rtype: (datetime,)
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :param request_time: The request_time of this {{classname}}.
        :type request_time: (datetime,)
        """
        self._request_time = request_time

    @property
    def response_time(self):
        """Gets the response_time of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :return: The response_time of this {{classname}}.
        :rtype: (datetime,)
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :param response_time: The response_time of this {{classname}}.
        :type response_time: (datetime,)
        """
        self._response_time = response_time

    @property
    def client_id(self):
        """Gets the client_id of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :return: The client_id of this {{classname}}.
        :rtype: (datetime,)
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this {{classname}}.

        {{#description}}
        {{{description}}}  # noqa: E501
        {{/description}}

        :param client_id: The client_id of this {{classname}}.
        :type client_id: str
        """
        self._client_id = client_id
{{/x-monitor-data}}{{/vendorExtensions}}
{{/model}}
{{/models}}
